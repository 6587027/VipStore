// frontend/src/components/CartModal.jsx
import React, { useState } from 'react';
import { useCart } from '../context/CartContext';
import { useAuth } from '../context/AuthContext';
import './CartModal.css';

const CartModal = ({ isOpen, onClose }) => {
  const {
    cartItems,
    totalItems,
    totalAmount,
    removeFromCart,
    updateQuantity,
    clearCart,
    formatCurrency,
    getShippingCost,
    getFinalTotal,
    isEmpty
  } = useCart();

  const { isLoggedIn, user } = useAuth();
  const [isCheckingOut, setIsCheckingOut] = useState(false);
  const [checkoutStep, setCheckoutStep] = useState('cart'); // 'cart', 'checkout', 'success'

  if (!isOpen) return null;

  const shippingCost = getShippingCost();
  const finalTotal = getFinalTotal();

  const handleQuantityChange = (productId, newQuantity) => {
    if (newQuantity <= 0) {
      removeFromCart(productId);
    } else {
      updateQuantity(productId, newQuantity);
    }
  };

  const handleCheckout = async () => {
    if (!isLoggedIn()) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠');
      return;
    }

    setIsCheckingOut(true);
    setCheckoutStep('checkout');

    // Simulate API call
    try {
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Success
      setCheckoutStep('success');
      clearCart();
      
      setTimeout(() => {
        setCheckoutStep('cart');
        setIsCheckingOut(false);
        onClose();
      }, 3000);
      
    } catch (error) {
      console.error('Checkout error:', error);
      setIsCheckingOut(false);
      setCheckoutStep('cart');
    }
  };

  const renderCartItems = () => (
    <div className="cart-items">
      {cartItems.map(item => (
        <div key={item.id} className="cart-item">
          <div className="cart-item-image">
            <img 
              src={item.image || '/api/placeholder/80/80'} 
              alt={item.name}
            />
          </div>
          
          <div className="cart-item-details">
            <h4 className="cart-item-name">{item.name}</h4>
            <div className="cart-item-price">
              {formatCurrency(item.price)} √ó {item.quantity}
            </div>
            <div className="cart-item-subtotal">
              ‡∏£‡∏ß‡∏°: {formatCurrency(item.subtotal)}
            </div>
          </div>
          
          <div className="cart-item-controls">
            <div className="quantity-controls">
              <button
                className="quantity-btn"
                onClick={() => handleQuantityChange(item.id, item.quantity - 1)}
                disabled={isCheckingOut}
              >
                -
              </button>
              <span className="quantity-display">{item.quantity}</span>
              <button
                className="quantity-btn"
                onClick={() => handleQuantityChange(item.id, item.quantity + 1)}
                disabled={isCheckingOut || item.quantity >= item.stock}
              >
                +
              </button>
            </div>
            
            <button
              className="remove-btn"
              onClick={() => removeFromCart(item.id)}
              disabled={isCheckingOut}
              title="‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
            >
              üóëÔ∏è
            </button>
          </div>
        </div>
      ))}
    </div>
  );

  const renderCartSummary = () => (
    <div className="cart-summary">
      <div className="summary-row">
        <span>‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ({totalItems} ‡∏ä‡∏¥‡πâ‡∏ô)</span>
        <span>{formatCurrency(totalAmount)}</span>
      </div>
      
      <div className="summary-row">
        <span>‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</span>
        <span>
          {shippingCost === 0 ? (
            <span className="free-shipping">‡∏ü‡∏£‡∏µ!</span>
          ) : (
            formatCurrency(shippingCost)
          )}
        </span>
      </div>
      
      {totalAmount >= 1000 && shippingCost === 0 && (
        <div className="shipping-notice">
          üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ü‡∏£‡∏µ
        </div>
      )}
      
      <div className="summary-row total-row">
        <span>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô</span>
        <span className="total-amount">{formatCurrency(finalTotal)}</span>
      </div>
    </div>
  );

  const renderCheckoutForm = () => (
    <div className="checkout-form">
      <h3>üöö ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</h3>
      
      <div className="customer-info">
        <div className="info-row">
          <span>üë§ ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏±‡πà‡∏á:</span>
          <span>{user?.name || user?.username}</span>
        </div>
        <div className="info-row">
          <span>üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•:</span>
          <span>{user?.email}</span>
        </div>
      </div>
      
      <div className="shipping-form">
        <input 
          type="text" 
          placeholder="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á" 
          className="shipping-input"
          disabled={isCheckingOut}
        />
        <input 
          type="text" 
          placeholder="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå" 
          className="shipping-input"
          disabled={isCheckingOut}
        />
        <textarea 
          placeholder="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)"
          className="shipping-textarea"
          disabled={isCheckingOut}
        />
      </div>

      {renderCartSummary()}
      
      <div className="checkout-loading">
        {isCheckingOut && (
          <div className="loading-indicator">
            <div className="spinner"></div>
            <span>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠...</span>
          </div>
        )}
      </div>
    </div>
  );

  const renderSuccess = () => (
    <div className="checkout-success">
      <div className="success-icon">üéâ</div>
      <h3>‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</h3>
      <p>‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</p>
      <p>‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏ó‡πà‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î</p>
      <div className="success-animation">‚ú®</div>
    </div>
  );

  return (
    <div className="cart-modal-overlay" onClick={onClose}>
      <div className="cart-modal" onClick={e => e.stopPropagation()}>
        {/* Header */}
        <div className="cart-modal-header">
          <h2>
            üõí ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
            {checkoutStep === 'checkout' && ' - ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô'}
            {checkoutStep === 'success' && ' - ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'}
          </h2>
          <button className="close-btn" onClick={onClose}>‚úï</button>
        </div>

        {/* Content */}
        <div className="cart-modal-content">
          {checkoutStep === 'cart' && (
            <>
              {isEmpty ? (
                <div className="empty-cart">
                  <div className="empty-cart-icon">üõí</div>
                  <h3>‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤</h3>
                  <p>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ä‡πâ‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á</p>
                </div>
              ) : (
                <>
                  {renderCartItems()}
                  {renderCartSummary()}
                </>
              )}
            </>
          )}

          {checkoutStep === 'checkout' && renderCheckoutForm()}
          {checkoutStep === 'success' && renderSuccess()}
        </div>

        {/* Footer */}
        {!isEmpty && checkoutStep === 'cart' && (
          <div className="cart-modal-footer">
            <button 
              className="clear-cart-btn"
              onClick={clearCart}
              disabled={isCheckingOut}
            >
              üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
            </button>
            
            <div className="checkout-actions">
              <button 
                className="continue-shopping-btn"
                onClick={onClose}
              >
                üõçÔ∏è ‡∏ä‡πâ‡∏≠‡∏õ‡∏ï‡πà‡∏≠
              </button>
              
              <button 
                className="checkout-btn"
                onClick={handleCheckout}
                disabled={isCheckingOut || !isLoggedIn()}
              >
                {!isLoggedIn() ? 'üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠' : 'üí≥ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô'}
              </button>
            </div>
          </div>
        )}

        {checkoutStep === 'checkout' && (
          <div className="cart-modal-footer">
            <button 
              className="back-btn"
              onClick={() => setCheckoutStep('cart')}
              disabled={isCheckingOut}
            >
              ‚Üê ‡∏Å‡∏•‡∏±‡∏ö
            </button>
            
            <button 
              className="confirm-order-btn"
              onClick={handleCheckout}
              disabled={isCheckingOut}
            >
              {isCheckingOut ? '‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£...' : '‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'}
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default CartModal;