// frontend/src/components/CartModal.jsx
import React, { useState } from 'react';
import { useCart } from '../context/CartContext';
import { useAuth } from '../context/AuthContext';
import './CartModal.css';
import { ordersAPI } from '../services/api'; 

const CartModal = ({ isOpen, onClose }) => {
  const {
    cartItems,
    totalItems,
    totalAmount,
    removeFromCart,
    updateQuantity,
    clearCart,
    formatCurrency,
    getShippingCost,
    getFinalTotal,
    isEmpty
  } = useCart();

  const { isLoggedIn, user } = useAuth();
  const [isCheckingOut, setIsCheckingOut] = useState(false);
  const [checkoutStep, setCheckoutStep] = useState('cart'); // 'cart', 'address', 'processing', 'success'

  // üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏° Address Form State
  const [shippingAddress, setShippingAddress] = useState({
    firstName: '',
    lastName: '',
    phone: '',
    address: '',
    district: '',
    province: '',
    postalCode: '',
    notes: ''
  });

  if (!isOpen) return null;

  const shippingCost = getShippingCost();
  const finalTotal = getFinalTotal();

  const handleQuantityChange = (productId, newQuantity) => {
    if (newQuantity <= 0) {
      removeFromCart(productId);
    } else {
      updateQuantity(productId, newQuantity);
    }
  };

  // üÜï ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç handleCheckout ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Address Form
  const handleCheckout = () => {
    if (!isLoggedIn()) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠');
      return;
    }

    if (isEmpty) {
      alert('‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤');
      return;
    }

    // ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
    setCheckoutStep('address');
  };

  //handle Address Submit 
const handleAddressSubmit = async (e) => {
  e.preventDefault();
  
  // Validate required fields
  const requiredFields = ['firstName', 'lastName', 'phone', 'address', 'district', 'province', 'postalCode'];
  const missingFields = requiredFields.filter(field => !shippingAddress[field].trim());
  
  if (missingFields.length > 0) {
    alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
    return;
  }

  setIsCheckingOut(true);
  setCheckoutStep('processing');

  try {
    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Order
    const orderData = {
      userId: user?.id || user?._id || null,
      customerInfo: {
        firstName: shippingAddress.firstName,
        lastName: shippingAddress.lastName,
        email: user?.email || '',
        phone: shippingAddress.phone,
        address: {
          street: shippingAddress.address,
          district: shippingAddress.district,
          province: shippingAddress.province,
          postalCode: shippingAddress.postalCode,
          country: 'Thailand',
          notes: shippingAddress.notes
        }
      },
      items: cartItems.map(item => ({
        productId: item.id,
        productName: item.name,
        quantity: item.quantity,
        price: item.price
      })),
      pricing: {
        subtotal: totalAmount,
        shipping: shippingCost,
        total: finalTotal
      }
    };

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Order ‡∏ú‡πà‡∏≤‡∏ô API
    const response = await ordersAPI.create(orderData);
    
    if (response.data.success) {
      console.log('‚úÖ Order created successfully:', response.data.order);
      
      // Success
      setCheckoutStep('success');
      clearCart();
      
      setTimeout(() => {
        setCheckoutStep('cart');
        setIsCheckingOut(false);
        setShippingAddress({
          firstName: '',
          lastName: '',
          phone: '',
          address: '',
          district: '',
          province: '',
          postalCode: '',
          notes: ''
        });
        onClose();
      }, 4000);
    } else {
      throw new Error(response.data.message || 'Failed to create order');
    }
    
  } catch (error) {
    console.error('Checkout error:', error);
    setIsCheckingOut(false);
    setCheckoutStep('address');
    alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠: ${error.message || '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'}`);
  }
};

  // üÜï Handle Input Change
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setShippingAddress(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // üÜï Reset Modal State
  const handleClose = () => {
    setCheckoutStep('cart');
    setIsCheckingOut(false);
    setShippingAddress({
      firstName: '',
      lastName: '',
      phone: '',
      address: '',
      district: '',
      province: '',
      postalCode: '',
      notes: ''
    });
    onClose();
  };

  const renderCartItems = () => (
    <div className="cart-items">
      {cartItems.map(item => (
        <div key={item.id} className="cart-item">
          <div className="cart-item-image">
            <img 
              src={item.image || '/api/placeholder/80/80'} 
              alt={item.name}
            />
          </div>
          
          <div className="cart-item-details">
            <h4 className="cart-item-name">{item.name}</h4>
            <div className="cart-item-price">
              {formatCurrency(item.price)} √ó {item.quantity}
            </div>
            <div className="cart-item-subtotal">
              ‡∏£‡∏ß‡∏°: {formatCurrency(item.subtotal)}
            </div>
          </div>
          
          <div className="cart-item-controls">
            <div className="quantity-controls">
              <button
                className="quantity-btn"
                onClick={() => handleQuantityChange(item.id, item.quantity - 1)}
                disabled={isCheckingOut}
              >
                -
              </button>
              <span className="quantity-display">{item.quantity}</span>
              <button
                className="quantity-btn"
                onClick={() => handleQuantityChange(item.id, item.quantity + 1)}
                disabled={isCheckingOut || item.quantity >= item.stock}
              >
                +
              </button>
            </div>
            
            <button
              className="remove-btn"
              onClick={() => removeFromCart(item.id)}
              disabled={isCheckingOut}
              title="‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
            >
              üóëÔ∏è
            </button>
          </div>
        </div>
      ))}
    </div>
  );

  const renderCartSummary = () => (
    <div className="cart-summary">
      <div className="summary-row">
        <span>‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ({totalItems} ‡∏ä‡∏¥‡πâ‡∏ô)</span>
        <span>{formatCurrency(totalAmount)}</span>
      </div>
      
      <div className="summary-row">
        <span>‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</span>
        <span>
          {shippingCost === 0 ? (
            <span className="free-shipping">‡∏ü‡∏£‡∏µ!</span>
          ) : (
            formatCurrency(shippingCost)
          )}
        </span>
      </div>
      
      {totalAmount >= 1000 && shippingCost === 0 && (
        <div className="shipping-notice">
          üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ü‡∏£‡∏µ
        </div>
      )}
      
      <div className="summary-row total-row">
        <span>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô</span>
        <span className="total-amount">{formatCurrency(finalTotal)}</span>
      </div>
    </div>
  );

  // üÜï Address Form Component
  const renderAddressForm = () => (
    <div className="address-form-container">
      <div className="checkout-header">
        <h3>üöö ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</h3>
        <div className="user-info">
          <p>üë§ ‡∏™‡∏±‡πà‡∏á‡πÇ‡∏î‡∏¢: {user?.firstName || user?.username}</p>
          <p>üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: {user?.email}</p>
        </div>
      </div>

      <form onSubmit={handleAddressSubmit} className="address-form">
        <div className="form-row">
          <div className="form-group">
            <label>‡∏ä‡∏∑‡πà‡∏≠ *</label>
            <input
              type="text"
              name="firstName"
              value={shippingAddress.firstName}
              onChange={handleInputChange}
              placeholder="Name"
              className="form-input"
              required
            />
          </div>
          <div className="form-group">
            <label>‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• *</label>
            <input
              type="text"
              name="lastName"
              value={shippingAddress.lastName}
              onChange={handleInputChange}
              placeholder="Surname"
              className = "form-input"
              required
              
            />
          </div>
        </div>

        <div className="form-group">
            <label>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå - Phone Number *</label>
            <input
              type="tel"
              name="phone"
              value={shippingAddress.phone}
              onChange={handleInputChange}
              placeholder="+66 Phoene number"
              className="form-input"
              maxLength="10"
              pattern="[0-9]*" 
              onInput={(e) => e.target.value = e.target.value.replace(/[^0-9]/g, '')}  
              required
            />
          </div>

        <div className="form-group">
          <label>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà - Address *</label>
          <textarea
            name="address"
            value={shippingAddress.address}
            onChange={handleInputChange}
            placeholder="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà, ‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô, ‡∏ã‡∏≠‡∏¢, ‡∏ñ‡∏ô‡∏ô (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î)"
            className="form-textarea"
            rows="3"
            required
          />
        </div>

        <div className="form-row">
          <div className="form-group">
            <label>‡πÄ‡∏Ç‡∏ï/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ - District *</label>
            <input
              type="text"
              name="district"
              value={shippingAddress.district}
              onChange={handleInputChange}
              placeholder="‡πÄ‡∏Ç‡∏ï/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠"
              className="form-input"
              required
            />
          </div>
          <div className="form-group">
            <label>‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î -iProvince *</label>
            <input
              type="text"
              name="province"
              value={shippingAddress.province}
              onChange={handleInputChange}
              placeholder="‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î"
              className="form-input"
              required
            />
          </div>
          <div className="form-group">
            <label>‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå - Post code *</label>
            <input
              type="text"
              name="postalCode"
              value={shippingAddress.postalCode}
              onChange={handleInputChange}
              placeholder="xxxxx"
              maxLength="5"
              className="form-input"
              required
            />
          </div>
        </div>

        <div className="form-group">
          <label>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° - Additional Notes</label>
          <textarea
            name="notes"
            value={shippingAddress.notes}
            onChange={handleInputChange}
            placeholder="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö - Optional field)"
            className="form-textarea"
            rows="2"
          />
        </div>

        <div className="order-summary">
          <h4>üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</h4>
          <div className="summary-row">
            <span>‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ({totalItems} ‡∏ä‡∏¥‡πâ‡∏ô)</span>
            <span>{formatCurrency(totalAmount)}</span>
          </div>
          <div className="summary-row">
            <span>‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</span>
            <span>{shippingCost === 0 ? '‡∏ü‡∏£‡∏µ!' : formatCurrency(shippingCost)}</span>
          </div>
          <div className="summary-total">
            <span>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô</span>
            <span>{formatCurrency(finalTotal)}</span>
          </div>
        </div>
      </form>
    </div>
  );

  // üÜï Processing Component
  const renderProcessing = () => (
    <div className="processing-container">
      <div className="processing-animation">
        <div className="spinner-large"></div>
      </div>
      <h3>‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</h3>
      <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...</p>
    </div>
  );

  const renderSuccess = () => (
    <div className="checkout-success">
      <div className="success-icon">üéâ</div>
      <h3>‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</h3>
      <p>‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</p>
      <p>‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏ó‡πà‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î</p>
      <div className="order-details">
        <p>üì¶ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {formatCurrency(finalTotal)}</p>
        <p>üöö ‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 2-3 ‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£</p>
      </div>
      <div className="success-animation">‚ú®</div>
    </div>
  );

  // üÜï Dynamic Header Title
  const getHeaderTitle = () => {
    switch (checkoutStep) {
      case 'address': return 'üõí ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏±‡∏î‡∏™‡πà‡∏á';
      case 'processing': return 'üõí ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£';
      case 'success': return 'üõí ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ - ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
      default: return 'üõí ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤';
    }
  };

  return (
    <div className="cart-modal-overlay" onClick={handleClose}>
      <div className="cart-modal" onClick={e => e.stopPropagation()}>
        {/* Header */}
        <div className="cart-modal-header">
          <h2>{getHeaderTitle()}</h2>
          <button className="close-btn" onClick={handleClose}>‚úï</button>
        </div>

        {/* Content */}
        <div className="cart-modal-content">
          {checkoutStep === 'cart' && (
            <>
              {isEmpty ? (
                <div className="empty-cart">
                  <div className="empty-cart-icon">üõí</div>
                  <h3>‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤</h3>
                  <p>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ä‡πâ‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á</p>
                </div>
              ) : (
                <>
                  {renderCartItems()}
                  {renderCartSummary()}
                </>
              )}
            </>
          )}

          {checkoutStep === 'address' && renderAddressForm()}
          {checkoutStep === 'processing' && renderProcessing()}
          {checkoutStep === 'success' && renderSuccess()}
        </div>

        {/* Footer */}
        {!isEmpty && checkoutStep === 'cart' && (
          <div className="cart-modal-footer">
            <button 
              className="clear-cart-btn"
              onClick={clearCart}
              disabled={isCheckingOut}
            >
              üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
            </button>
            
            <div className="checkout-actions">
              <button 
                className="continue-shopping-btn"
                onClick={handleClose}
              >
                üõçÔ∏è ‡∏ä‡πâ‡∏≠‡∏õ‡∏ï‡πà‡∏≠
              </button>
              
              <button 
                className="checkout-btn"
                onClick={handleCheckout}
                disabled={isCheckingOut || !isLoggedIn()}
              >
                {!isLoggedIn() ? 'üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠' : 'üõí ‡πÑ‡∏õ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô'}
              </button>
            </div>
          </div>
        )}

        {checkoutStep === 'address' && (
          <div className="cart-modal-footer">
            <button 
              className="back-btn"
              onClick={() => setCheckoutStep('cart')}
              disabled={isCheckingOut}
            >
              ‚Üê ‡∏Å‡∏•‡∏±‡∏ö
            </button>
            
            <button 
              className="confirm-order-btn"
              onClick={handleAddressSubmit}
              disabled={isCheckingOut}
            >
              ‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default CartModal;