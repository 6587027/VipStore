// frontend/src/components/CartModal.jsx - Production-Ready Version + Payment Integration
import React, { useState, useEffect } from 'react';
import { useCart } from '../context/CartContext';
import { useAuth } from '../context/AuthContext';
import './CartModal.css';
import { ordersAPI, authAPI } from '../services/api'; 
import PaymentModal from './payment/PaymentModal'; 

const CartModal = ({ isOpen, onClose }) => {
  const {
    cartItems,
    totalItems,
    totalAmount,
    removeFromCart,
    updateQuantity,
    clearCart,
    formatCurrency,
    getShippingCost,
    getFinalTotal,
    isEmpty
  } = useCart();

  const { isLoggedIn, user } = useAuth();
  const [isCheckingOut, setIsCheckingOut] = useState(false);
  const [checkoutStep, setCheckoutStep] = useState('cart'); // 'cart', 'address', 'processing', 'success'

  // üÜï Payment States - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
  const [showPaymentModal, setShowPaymentModal] = useState(false);
  const [paymentOrderData, setPaymentOrderData] = useState(null);

  // üÜï Address Profile Management States
  const [addressProfiles, setAddressProfiles] = useState([]);
  const [selectedProfileId, setSelectedProfileId] = useState('');
  const [showCreateProfile, setShowCreateProfile] = useState(false);
  const [showManageProfiles, setShowManageProfiles] = useState(false);
  const [loadingProfiles, setLoadingProfiles] = useState(false);

  // üÜï New Profile Form State
  const [newProfileData, setNewProfileData] = useState({
    profileName: '',
    firstName: '',
    lastName: '',
    phone: '',
    address: {
      street: '',
      district: '',
      province: '',
      postalCode: '',
      notes: ''
    },
    isDefault: false
  });

  // Manual Address Form State (existing)
  const [shippingAddress, setShippingAddress] = useState({
    firstName: '',
    lastName: '',
    phone: '',
    address: '',
    district: '',
    province: '',
    postalCode: '',
    notes: ''
  });

  const [useManualAddress, setUseManualAddress] = useState(false);

  // üîß Helper function to get user ID safely
  const getUserId = () => {
    if (!user) {
      console.log('üîç No user object found');
      return null;
    }
    
    const userId = user.id || user._id || user.userId;
    console.log('üîç User ID resolution:', {
      'user.id': user.id,
      'user._id': user._id,  
      'user.userId': user.userId,
      'final userId': userId,
      'user object': user
    });
    
    return userId;
  };

  // üîß Enhanced useEffect with better user checking
  useEffect(() => {
    console.log('üîç useEffect triggered:', { isLoggedIn: isLoggedIn(), user, checkoutStep });
    
    if (isLoggedIn() && user && checkoutStep === 'address') {
      const userId = getUserId();
      
      if (userId) {
        console.log('‚úÖ Valid user ID found, loading profiles:', userId);
        loadAddressProfiles(userId);
      } else {
        console.log('‚ö†Ô∏è No valid user ID, using manual address form');
        setUseManualAddress(true);
      }
    }
  }, [isLoggedIn, user, checkoutStep]);

  // üîß Enhanced loadAddressProfiles with userId parameter
  const loadAddressProfiles = async (userId) => {
    if (!userId) {
      console.error('‚ùå loadAddressProfiles: No userId provided');
      setUseManualAddress(true);
      return;
    }

    setLoadingProfiles(true);
    console.log('üìç Loading address profiles for userId:', userId);
    
    try {
      const response = await authAPI.addressProfiles.getAll(userId);
      console.log('üìç Address profiles response:', response);
      
      if (response.data.success) {
        setAddressProfiles(response.data.addressProfiles);
        
        // Auto-select default profile
        const defaultProfile = response.data.addressProfiles.find(p => p.isDefault);
        if (defaultProfile) {
          setSelectedProfileId(defaultProfile.profileId);
          setUseManualAddress(false);
          console.log('‚úÖ Auto-selected default profile:', defaultProfile.profileName);
        } else if (response.data.addressProfiles.length === 0) {
          // No profiles exist, show manual form
          setUseManualAddress(true);
          console.log('‚ÑπÔ∏è No profiles found, using manual form');
        }
      }
    } catch (error) {
      console.error('‚ùå Load address profiles error:', error);
      setUseManualAddress(true); // Fallback to manual
    } finally {
      setLoadingProfiles(false);
    }
  };

  // const addressProfileExists 
  const createAddressProfile = async () => {
    const userId = getUserId();
    
    if (!userId) {
      alert('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà');
      console.error('‚ùå createAddressProfile: No valid user ID');
      return;
    }

    console.log('üì§ Creating address profile for userId:', userId);

    try {
      // Validation
      if (!newProfileData.profileName.trim()) {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå');
        return;
      }

      if (!newProfileData.firstName.trim() || !newProfileData.lastName.trim()) {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•');
        return;
      }

      if (!/^[0-9]{10}$/.test(newProfileData.phone)) {
        alert('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 10 ‡∏´‡∏•‡∏±‡∏Å');
        return;
      }

      if (!newProfileData.address.street.trim() || !newProfileData.address.district.trim() || 
          !newProfileData.address.province.trim() || !newProfileData.address.postalCode.trim()) {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
        return;
      }

      if (!/^[0-9]{5}$/.test(newProfileData.address.postalCode)) {
        alert('‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 5 ‡∏´‡∏•‡∏±‡∏Å');
        return;
      }

      const response = await authAPI.addressProfiles.create(userId, newProfileData);
      console.log('üì§ Create profile response:', response);
      
      if (response.data.success) {
        alert('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
        
        // Reload profiles
        await loadAddressProfiles(userId);
        
        // Select the new profile
        setSelectedProfileId(response.data.profile.profileId);
        setUseManualAddress(false);
        
        // Reset form and close modal
        setNewProfileData({
          profileName: '',
          firstName: '',
          lastName: '',
          phone: '',
          address: { street: '', district: '', province: '', postalCode: '', notes: '' },
          isDefault: false
        });
        setShowCreateProfile(false);
      }
    } catch (error) {
      console.error('‚ùå Create profile error:', error);
      alert(`‚ùå ${error.response?.data?.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ'}`);
    }
  };

  // üîß Enhanced deleteAddressProfile with better user ID handling
  const deleteAddressProfile = async (profileId, profileName) => {
    const userId = getUserId();
    
    if (!userId) {
      alert('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
      return;
    }

    if (!window.confirm(`‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå "${profileName}" ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`)) {
      return;
    }

    try {
      console.log('üóëÔ∏è Deleting profile for userId:', userId, 'profileId:', profileId);
      const response = await authAPI.addressProfiles.delete(userId, profileId);
      
      if (response.data.success) {
        alert('‚úÖ ‡∏•‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        await loadAddressProfiles(userId);
        
        // Reset selection if deleted profile was selected
        if (selectedProfileId === profileId) {
          setSelectedProfileId('');
          setUseManualAddress(true);
        }
      }
    } catch (error) {
      console.error('‚ùå Delete profile error:', error);
      alert(`‚ùå ${error.response?.data?.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ'}`);
    }
  };

  // üîß Enhanced setDefaultProfile with better user ID handling
  const setDefaultProfile = async (profileId) => {
    const userId = getUserId();
    
    if (!userId) {
      alert('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
      return;
    }

    try {
      console.log('‚≠ê Setting default profile for userId:', userId, 'profileId:', profileId);
      const response = await authAPI.addressProfiles.setDefault(userId, profileId);
      
      if (response.data.success) {
        await loadAddressProfiles(userId); // Reload to update default status
        alert('‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }
    } catch (error) {
      console.error('‚ùå Set default error:', error);
      alert(`‚ùå ${error.response?.data?.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏î‡πâ'}`);
    }
  };

  // üÜï Payment Success Handler
  const handlePaymentSuccess = async (paymentData) => {
  console.log('üí≥ Payment completed:', paymentData);
  
  setIsCheckingOut(true);
  setCheckoutStep('processing');
  setShowPaymentModal(false); // ‡∏õ‡∏¥‡∏î Payment Modal

  try {
    // ‚úÖ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Order ‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß!
    // ‡πÅ‡∏Ñ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ Success
    console.log('‚úÖ Order already exists, payment completed!');
    
    setCheckoutStep('success');
    clearCart();
    
    setTimeout(() => {
      setCheckoutStep('cart');
      setIsCheckingOut(false);
      resetStates();
      onClose();
    }, 4000);
    
  } catch (error) {
    console.error('‚ùå Payment completion error:', error);
    setIsCheckingOut(false);
    setCheckoutStep('address');
    alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message || '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'}`);
  }
};


  // üÜï Payment Close Handler - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
  const handlePaymentClose = () => {
    setShowPaymentModal(false);
    setPaymentOrderData(null);
    // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á reset checkout step ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ user ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ address
  };

  if (!isOpen) return null;

  const shippingCost = getShippingCost();
  const finalTotal = getFinalTotal();

  const handleQuantityChange = (productId, newQuantity) => {
    if (newQuantity <= 0) {
      removeFromCart(productId);
    } else {
      updateQuantity(productId, newQuantity);
    }
  };

  // Enhanced handleCheckout
  const handleCheckout = () => {
    if (!isLoggedIn()) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠');
      return;
    }

    if (isEmpty) {
      alert('‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤');
      return;
    }

    setCheckoutStep('address');
  };
  

 // CartModal.jsx - Debug Fix ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö handleAddressSubmit

const handleAddressSubmit = async (e) => {
  e.preventDefault();
  
  let finalAddressData;
  
  if (useManualAddress) {
    // Validate manual address
    const requiredFields = ['firstName', 'lastName', 'phone', 'address', 'district', 'province', 'postalCode'];
    const missingFields = requiredFields.filter(field => !shippingAddress[field].trim());
    
    if (missingFields.length > 0) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô: ' + missingFields.join(', '));
      return;
    }

    finalAddressData = {
      firstName: shippingAddress.firstName,
      lastName: shippingAddress.lastName,
      email: user?.email || '',
      phone: shippingAddress.phone,
      address: {
        street: shippingAddress.address,
        district: shippingAddress.district,
        province: shippingAddress.province,
        postalCode: shippingAddress.postalCode,
        country: 'Thailand',
        notes: shippingAddress.notes
      }
    };
  } else {
    // Use selected profile
    const selectedProfile = addressProfiles.find(p => p.profileId === selectedProfileId);
    
    if (!selectedProfile) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á');
      return;
    }

    finalAddressData = {
      firstName: selectedProfile.firstName,
      lastName: selectedProfile.lastName,
      email: user?.email || '',
      phone: selectedProfile.phone,
      address: selectedProfile.address
    };
  }

  try {
    // üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á Order ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î PaymentModal
    console.log('üì¶ Creating order before payment...');
    
    // üîç DEBUG: Log ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á
    console.log('üîç Cart Items for Order:', cartItems);
    console.log('üîç Final Address Data:', finalAddressData);
    console.log('üîç User ID:', getUserId());
    
    const orderData = {
      userId: getUserId(),
      customerInfo: finalAddressData,
      items: cartItems.map(item => {
        console.log('üîç Mapping cart item:', item); // Debug ‡πÅ‡∏ï‡πà‡∏•‡∏∞ item
        
        return {
          productId: item.id,        // üéØ ‡πÉ‡∏ä‡πâ item.id (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà item.productId)
          productName: item.name,
          quantity: item.quantity,
          price: item.price
        };
      }),
      pricing: {
        subtotal: totalAmount,
        shipping: shippingCost,
        total: finalTotal
      }
    };

    // üîç DEBUG: Log ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Order ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á
    console.log('üì§ Order Data to Send:', JSON.stringify(orderData, null, 2));
    
    // üîç ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ Cart Items ‡∏°‡∏µ id ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡πà‡∏≤
    const itemsWithoutId = cartItems.filter(item => !item.id);
    if (itemsWithoutId.length > 0) {
      console.error('‚ùå Cart items missing ID:', itemsWithoutId);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ID');
      return;
    }

    // üîç ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ Pricing ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!totalAmount || !finalTotal) {
      console.error('‚ùå Invalid pricing:', { totalAmount, shippingCost, finalTotal });
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤');
      return;
    }

    // üîç ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ Customer Info ‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!finalAddressData.firstName || !finalAddressData.lastName || !finalAddressData.phone) {
      console.error('‚ùå Incomplete customer info:', finalAddressData);
      alert('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
      return;
    }

    console.log('üöÄ All validations passed, creating order...');

    const response = await ordersAPI.create(orderData);
    
    if (response.data.success) {
      const createdOrder = response.data.order;
      console.log('‚úÖ Order created successfully:', createdOrder._id);

      // üÜï ‡∏™‡πà‡∏á orderId ‡πÑ‡∏õ PaymentModal
      const orderForPayment = {
        orderId: createdOrder._id,           // üéØ ‡∏ô‡∏µ‡πà‡πÅ‡∏´‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç!
        orderNumber: createdOrder.orderNumber,
        totalAmount: formatCurrency(totalAmount),
        shippingCost: shippingCost === 0 ? '‡∏ü‡∏£‡∏µ!' : formatCurrency(shippingCost),
        finalTotal: formatCurrency(finalTotal)
      };

      console.log('üí≥ Opening Payment Modal with data:', orderForPayment);
      
      setPaymentOrderData(orderForPayment);
      setShowPaymentModal(true);
    } else {
      throw new Error(response.data.message || 'Failed to create order');
    }
  } catch (error) {
    console.error('‚ùå Order creation error:', error);
    
    // üîç DEBUG: ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Error
    console.error('Error Details:', {
      message: error.message,
      response: error.response?.data,
      status: error.response?.status,
      stack: error.stack
    });
    
    // ‡πÅ‡∏™‡∏î‡∏á Error ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
    let errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠';
    
    if (error.response?.data?.message) {
      errorMessage = error.response.data.message;
    } else if (error.message) {
      errorMessage = error.message;
    }
    
    alert(`${errorMessage}\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà`);
  }
};

  // Handle Input Changes
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setShippingAddress(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleNewProfileInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    
    if (name.startsWith('address.')) {
      const addressField = name.split('.')[1];
      setNewProfileData(prev => ({
        ...prev,
        address: {
          ...prev.address,
          [addressField]: value
        }
      }));
    } else {
      setNewProfileData(prev => ({
        ...prev,
        [name]: type === 'checkbox' ? checked : value
      }));
    }
  };

  // üîß Reset States - ‡πÄ‡∏û‡∏¥‡πà‡∏° Payment states
  const resetStates = () => {
    setCheckoutStep('cart');
    setIsCheckingOut(false);
    setSelectedProfileId('');
    setUseManualAddress(false);
    setShowCreateProfile(false);
    setShowManageProfiles(false);
    setAddressProfiles([]);
    // üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ reset Payment states
    setShowPaymentModal(false);
    setPaymentOrderData(null);
    setShippingAddress({
      firstName: '',
      lastName: '',
      phone: '',
      address: '',
      district: '',
      province: '',
      postalCode: '',
      notes: ''
    });
    setNewProfileData({
      profileName: '',
      firstName: '',
      lastName: '',
      phone: '',
      address: { street: '', district: '', province: '', postalCode: '', notes: '' },
      isDefault: false
    });
  };

  const handleClose = () => {
    resetStates();
    onClose();
  };

  // Render Components (keeping all existing render functions unchanged)
  const renderCartItems = () => (
    <div className="cart-items">
      {cartItems.map(item => (
        <div key={item.id} className="cart-item">
          <div className="cart-item-image">
            <img 
              src={item.image || '/api/placeholder/80/80'} 
              alt={item.name}
            />
          </div>
          
          <div className="cart-item-details">
            <h4 className="cart-item-name">{item.name}</h4>
            <div className="cart-item-price">
              {formatCurrency(item.price)} √ó {item.quantity}
            </div>
            <div className="cart-item-subtotal">
              ‡∏£‡∏ß‡∏°: {formatCurrency(item.subtotal)}
            </div>
          </div>
          
          <div className="cart-item-controls">
            <div className="quantity-controls">
              <button
                className="quantity-btn"
                onClick={() => handleQuantityChange(item.id, item.quantity - 1)}
                disabled={isCheckingOut}
              >
                -
              </button>
              <span className="quantity-display">{item.quantity}</span>
              <button
                className="quantity-btn"
                onClick={() => handleQuantityChange(item.id, item.quantity + 1)}
                disabled={isCheckingOut || item.quantity >= item.stock}
              >
                +
              </button>
            </div>
            
            <button
              className="remove-btn"
              onClick={() => removeFromCart(item.id)}
              disabled={isCheckingOut}
              title="‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
            >
              üóëÔ∏è
            </button>
          </div>
        </div>
      ))}
    </div>
  );

  const renderCartSummary = () => (
    <div className="cart-summary">
      <div className="summary-row">
        <span>‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ({totalItems} ‡∏ä‡∏¥‡πâ‡∏ô)</span>
        <span>{formatCurrency(totalAmount)}</span>
      </div>
      
      <div className="summary-row">
        <span>‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</span>
        <span>
          {shippingCost === 0 ? (
            <span className="free-shipping">‡∏ü‡∏£‡∏µ!</span>
          ) : (
            formatCurrency(shippingCost)
          )}
        </span>
      </div>
      
      {totalAmount >= 1000 && shippingCost === 0 && (
        <div className="shipping-notice">
          üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ü‡∏£‡∏µ
        </div>
      )}
      
      <div className="summary-row total-row">
        <span>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô</span>
        <span className="total-amount">{formatCurrency(finalTotal)}</span>
      </div>
    </div>
  );

  // Address Profile Selector
  const renderAddressSelector = () => (
    <div className="address-selector">
      <div className="address-options">
        <div className="option-header">
          <h4>üìç ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</h4>
          <div className="address-actions">
            <button 
              className="btn-secondary"
              onClick={() => setShowCreateProfile(true)}
              disabled={addressProfiles.length >= 5}
            >
              ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡∏°‡πà ({addressProfiles.length}/5)
            </button>
            {addressProfiles.length > 0 && (
              <button 
                className="btn-secondary"
                onClick={() => setShowManageProfiles(true)}
              >
                ‚öôÔ∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
              </button>
            )}
          </div>
        </div>

        {loadingProfiles && (
          <div className="loading-profiles">
            <div className="spinner"></div>
            <span>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà...</span>
          </div>
        )}

        {!loadingProfiles && addressProfiles.length > 0 && (
          <div className="profile-list">
            {addressProfiles.map(profile => (
              <div 
                key={profile.profileId}
                className={`profile-item ${selectedProfileId === profile.profileId ? 'selected' : ''}`}
                onClick={() => {
                  setSelectedProfileId(profile.profileId);
                  setUseManualAddress(false);
                }}
              >
                <div className="profile-header">
                  <div className="profile-name">
                    üìç {profile.profileName}
                    {profile.isDefault && <span className="default-badge">‡∏´‡∏•‡∏±‡∏Å</span>}
                  </div>
                  <input
                    type="radio"
                    name="addressProfile"
                    checked={selectedProfileId === profile.profileId}
                    onChange={() => {}}
                  />
                </div>
                <div className="profile-details">
                  <div>{profile.firstName} {profile.lastName}</div>
                  <div>{profile.phone}</div>
                  <div>{profile.address.street}, {profile.address.district}</div>
                  <div>{profile.address.province} {profile.address.postalCode}</div>
                </div>
              </div>
            ))}
          </div>
        )}

        <div 
          className={`manual-address-option ${useManualAddress ? 'selected' : ''}`}
          onClick={() => {
            setUseManualAddress(true);
            setSelectedProfileId('');
          }}
        >
          <div className="option-header">
            <span>‚úèÔ∏è ‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡∏°‡πà</span>
            <input
              type="radio"
              name="addressProfile"
              checked={useManualAddress}
              onChange={() => {}}
            />
          </div>
        </div>
      </div>
    </div>
  );

  
// Create Profile Modal
const renderCreateProfileModal = () => {
  if (!showCreateProfile) return null;

  return (
    <div className="modal-overlay">
      <div className="modal-content create-profile-modal">
        <div className="modal-header">
          <h3>‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡∏°‡πà</h3>
          <button 
            className="close-btn"
            onClick={() => setShowCreateProfile(false)}
          >
            ‚úï
          </button>
        </div>

        <div className="modal-body">
          {/* üÜï Profile Name Section */}
          <div className="form-section">
            <h4 className="section-title">üìù ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå</h4>
            <div className="form-group">
              <label>‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå *</label>
              <input
                type="text"
                name="profileName"
                value={newProfileData.profileName}
                onChange={handleNewProfileInputChange}
                placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ö‡πâ‡∏≤‡∏ô, ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô, ‡∏´‡∏≠‡∏û‡∏±‡∏Å"
                className="form-input"
                maxLength="30"
              />
              <small className="form-hint">‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏≥</small>
            </div>
          </div>

          {/* üÜï Personal Info Section */}
          <div className="form-section">
            <h4 className="section-title">üë§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</h4>
            <div className="form-row">
              <div className="form-group">
                <label>‡∏ä‡∏∑‡πà‡∏≠ *</label>
                <input
                  type="text"
                  name="firstName"
                  value={newProfileData.firstName}
                  onChange={handleNewProfileInputChange}
                  placeholder="‡∏ä‡∏∑‡πà‡∏≠"
                  className="form-input"
                />
              </div>
              <div className="form-group">
                <label>‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• *</label>
                <input
                  type="text"
                  name="lastName"
                  value={newProfileData.lastName}
                  onChange={handleNewProfileInputChange}
                  placeholder="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
                  className="form-input"
                />
              </div>
            </div>

            <div className="form-group">
              <label>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå *</label>
              <input
                type="tel"
                name="phone"
                value={newProfileData.phone}
                onChange={handleNewProfileInputChange}
                placeholder="0812345678"
                className="form-input"
                maxLength="10"
                pattern="[0-9]*"
                onInput={(e) => e.target.value = e.target.value.replace(/[^0-9]/g, '')}
              />
              <small className="form-hint">‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå 10 ‡∏´‡∏•‡∏±‡∏Å</small>
            </div>
          </div>

          {/* üÜï Address Section */}
          <div className="form-section">
            <h4 className="section-title">üìç ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</h4>
            <div className="form-group">
              <label>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà *</label>
              <textarea
                name="address.street"
                value={newProfileData.address.street}
                onChange={handleNewProfileInputChange}
                placeholder="‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà, ‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô, ‡∏ã‡∏≠‡∏¢, ‡∏ñ‡∏ô‡∏ô"
                className="form-textarea"
                rows="3"
              />
            </div>
            <div className="form-row">
              <div className="form-group">
                <label>‡πÅ‡∏Ç‡∏ß‡∏á/‡∏ï‡∏≥‡∏ö‡∏•, ‡πÄ‡∏Ç‡∏ï/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ *</label>
                <input
                  type="text"
                  name="address.district"
                  value={newProfileData.address.district}
                  onChange={handleNewProfileInputChange}
                  placeholder="‡∏ö‡∏≤‡∏á‡∏à‡∏≤‡∏Å, ‡∏û‡∏£‡∏∞‡πÇ‡∏Ç‡∏ô‡∏á"
                  className="form-input"
                />
              </div>
              <div className="form-group">
                <label>‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î *</label>
                <input
                  type="text"
                  name="address.province"
                  value={newProfileData.address.province}
                  onChange={handleNewProfileInputChange}
                  placeholder="‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î"
                  className="form-input"
                />
              </div>
            </div>

            <div className="form-group">
              <label>‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå *</label>
              <input
                type="text"
                name="address.postalCode"
                value={newProfileData.address.postalCode}
                onChange={handleNewProfileInputChange}
                placeholder="12345"
                className="form-input"
                maxLength="5"
                pattern="[0-9]*"
                onInput={(e) => e.target.value = e.target.value.replace(/[^0-9]/g, '')}
              />
            </div>

            <div className="form-group">
              <label>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</label>
              <textarea
                name="address.notes"
                value={newProfileData.address.notes}
                onChange={handleNewProfileInputChange}
                placeholder="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)"
                className="form-textarea"
                rows="2"
              />
            </div>
          </div>

          {/* üÜï Settings Section */}
          <div className="form-section">
            <h4 className="section-title">‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤</h4>
            <div className="form-group">
              <label className="checkbox-label">
                <input
                  type="checkbox"
                  name="isDefault"
                  checked={newProfileData.isDefault}
                  onChange={handleNewProfileInputChange}
                />
                <span className="checkmark"></span>
                ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏•‡∏±‡∏Å
              </label>
              <small className="form-hint">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏•‡∏±‡∏Å‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</small>
            </div>
          </div>
        </div>

        <div className="modal-footer">
          <button 
            className="btn-secondary"
            onClick={() => setShowCreateProfile(false)}
          >
            ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
          </button>
          <button 
            className="btn-primary"
            onClick={createAddressProfile}
          >
            ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
          </button>
        </div>
      </div>
    </div>
  );
};

  // Manage Profiles Modal
  const renderManageProfilesModal = () => {
    if (!showManageProfiles) return null;

    return (
      <div className="modal-overlay">
        <div className="modal-content manage-profiles-modal">
          <div className="modal-header">
            <h3>‚öôÔ∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</h3>
            <button 
              className="close-btn"
              onClick={() => setShowManageProfiles(false)}
            >
              ‚úï
            </button>
          </div>

          <div className="modal-body">
            <div className="profiles-management">
              {addressProfiles.map(profile => (
                <div key={profile.profileId} className="manage-profile-item">
                  <div className="profile-info">
                    <div className="profile-title">
                      üìç {profile.profileName}
                      {profile.isDefault && <span className="default-badge">‡∏´‡∏•‡∏±‡∏Å</span>}
                    </div>
                    <div className="profile-details">
                      <div>{profile.firstName} {profile.lastName}</div>
                      <div>{profile.phone}</div>
                      <div>{profile.address.street}</div>
                      <div>{profile.address.district}, {profile.address.province} {profile.address.postalCode}</div>
                    </div>
                  </div>
                  
                  <div className="profile-actions">
                    {!profile.isDefault && (
                      <button
                        className="btn-action set-default"
                        onClick={() => setDefaultProfile(profile.profileId)}
                        title="‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏•‡∏±‡∏Å"
                      >
                        ‚≠ê
                      </button>
                    )}
                    
                    <button
                      className="btn-action delete"
                      onClick={() => deleteAddressProfile(profile.profileId, profile.profileName)}
                      disabled={addressProfiles.length <= 1}
                      title="‡∏•‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà"
                    >
                      üóëÔ∏è
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </div>

          <div className="modal-footer">
            <button 
              className="btn-primary"
              onClick={() => setShowManageProfiles(false)}
            >
              ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
            </button>
          </div>
        </div>
      </div>
    );
  };

// üîß renderAddressForm 
const renderAddressForm = () => (
  <div className="address-form-container">
    {/* üÜï Enhanced Checkout Header */}
    <div className="checkout-header">
      <div className="checkout-title">
        <h3>üöö ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</h3>
      </div>
      
      {/* üÜï Enhanced User Info Card */}
      <div className="user-info-card">
        <div className="user-card-header">
          <div className="user-avatar-large">
            üë§
          </div>
          <div className="user-card-details">
            <div className="user-card-name">
              {user?.firstName || user?.username || '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'}
            </div>
            <div className="user-card-role">
              {user?.role === 'admin' ? '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö' : '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤'}
            </div>
          </div>
        </div>
        
        <div className="user-card-info">
          <div className="info-item">
            <span className="info-label">üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•:</span>
            <span className="info-value">{user?.email}</span>
          </div>
          <div className="info-item">
            <span className="info-label">üÜî ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:</span>
            <span className="info-value">{user?.username}</span>
          </div>
        </div>
      </div>
    </div>

    {/* üÜï Address Profile Selector */}
    {renderAddressSelector()}

    {/* Manual Address Form - Show only when useManualAddress is true */}
    {useManualAddress && (
      <form onSubmit={handleAddressSubmit} className="address-form manual-form">
        <h4>‚úèÔ∏è ‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡∏°‡πà</h4>
        
        {/* ‚úÖ Name Fields */}
        <div className="form-row">
          <div className="form-group">
            <label>‡∏ä‡∏∑‡πà‡∏≠ *</label>
            <input
              type="text"
              name="firstName"
              value={shippingAddress.firstName}
              onChange={handleInputChange}
              placeholder="‡∏ä‡∏∑‡πà‡∏≠"
              className="form-input"
              required
            />
          </div>
          <div className="form-group">
            <label>‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• *</label>
            <input
              type="text"
              name="lastName"
              value={shippingAddress.lastName}
              onChange={handleInputChange}
              placeholder="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
              className="form-input"
              required
            />
          </div>
        </div>

        {/* ‚úÖ Phone Field */}
        <div className="form-group">
          <label>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå *</label>
          <input
            type="tel"
            name="phone"
            value={shippingAddress.phone}
            onChange={handleInputChange}
            placeholder="0812345678"
            className="form-input"
            maxLength="10"
            pattern="[0-9]*" 
            onInput={(e) => e.target.value = e.target.value.replace(/[^0-9]/g, '')}  
            required
          />
        </div>

        {/* ‚úÖ Address Field */}
        <div className="form-group">
          <label>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà *</label>
          <textarea
            name="address"
            value={shippingAddress.address}
            onChange={handleInputChange}
            placeholder="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà, ‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô, ‡∏ã‡∏≠‡∏¢, ‡∏ñ‡∏ô‡∏ô"
            className="form-textarea"
            rows="3"
            required
          />
        </div>
        {/* ‚úÖ District Field */}
        <div className="form-row">
          <div className="form-group">
            <label>‡πÅ‡∏Ç‡∏ß‡∏á/‡∏ï‡∏≥‡∏ö‡∏•, ‡πÄ‡∏Ç‡∏ï/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ *</label>
            <input
              type="text"
              name="district"
              value={shippingAddress.district}
              onChange={handleInputChange}
              placeholder="‡∏ö‡∏≤‡∏á‡∏à‡∏≤‡∏Å, ‡∏û‡∏£‡∏∞‡πÇ‡∏Ç‡∏ô‡∏á"
              className="form-input"
              required
            />
          </div>
        </div>

        {/* ‚úÖ Province and Postal Code */}
        <div className="form-row">
          <div className="form-group">
            <label>‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î *</label>
            <input
              type="text"
              name="province"
              value={shippingAddress.province}
              onChange={handleInputChange}
              placeholder="‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î"
              className="form-input"
              required
            />
          </div>
          <div className="form-group">
            <label>‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå *</label>
            <input
              type="text"
              name="postalCode"
              value={shippingAddress.postalCode}
              onChange={handleInputChange}
              placeholder="12345"
              maxLength="5"
              pattern="[0-9]*"
              onInput={(e) => e.target.value = e.target.value.replace(/[^0-9]/g, '')}
              className="form-input"
              required
            />
          </div>
        </div>

        {/* ‚úÖ Notes Field */}
        <div className="form-group">
          <label>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</label>
          <textarea
            name="notes"
            value={shippingAddress.notes}
            onChange={handleInputChange}
            placeholder="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)"
            className="form-textarea"
            rows="2"
          />
        </div>
      </form>
    )}

    {/* ‚úÖ Order Summary */}
    <div className="order-summary">
      <h4>üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</h4>
      <div className="summary-row">
        <span>‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ({totalItems} ‡∏ä‡∏¥‡πâ‡∏ô)</span>
        <span>{formatCurrency(totalAmount)}</span>
      </div>
      <div className="summary-row">
        <span>‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</span>
        <span>{shippingCost === 0 ? '‡∏ü‡∏£‡∏µ!' : formatCurrency(shippingCost)}</span>
      </div>
      <div className="summary-total">
        <span>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô</span>
        <span>{formatCurrency(finalTotal)}</span>
      </div>
    </div>
  </div>
);

  // Processing Component (existing)
  const renderProcessing = () => (
    <div className="processing-container">
      <div className="processing-animation">
        <div className="spinner-large"></div>
      </div>
      <h3>‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</h3>
      <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...</p>
    </div>
  );

  // Success Component (existing)
  const renderSuccess = () => (
    <div className="checkout-success">
      <div className="success-icon">üéâ</div>
      <h3>‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</h3>
      <p>‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</p>
      <p>‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏ó‡πà‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î</p>
      <div className="order-details">
        <p>üì¶ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {formatCurrency(finalTotal)}</p>
        <p>üöö ‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 2-3 ‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£</p>
      </div>
      <div className="success-animation">‚ú®</div>
    </div>
  );

  // Dynamic Header Title
  const getHeaderTitle = () => {
    switch (checkoutStep) {
      case 'address': return 'üõí ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏±‡∏î‡∏™‡πà‡∏á';
      case 'processing': return 'üõí ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£';
      case 'success': return 'üõí ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ - ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
      default: return 'üõí ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤';
    }
  };

  return (
    <>
      {/* Cart Modal - ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏î‡∏¥‡∏° */}
      <div className="cart-modal-overlay" onClick={handleClose}>
        <div className="cart-modal" onClick={e => e.stopPropagation()}>
          {/* Header */}
          <div className="cart-modal-header">
            <h2>{getHeaderTitle()}</h2>
            <button className="close-btn" onClick={handleClose}>‚úï</button>
          </div>

          {/* Content */}
          <div className="cart-modal-content">
            {checkoutStep === 'cart' && (
              <>
                {isEmpty ? (
                  <div className="empty-cart">
                    <div className="empty-cart-icon">üõí</div>
                    <h3>‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤</h3>
                    <p>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ä‡πâ‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á</p>
                  </div>
                ) : (
                  <>
                    {renderCartItems()}
                    {renderCartSummary()}
                  </>
                )}
              </>
            )}

            {checkoutStep === 'address' && renderAddressForm()}
            {checkoutStep === 'processing' && renderProcessing()}
            {checkoutStep === 'success' && renderSuccess()}
          </div>

          {/* Footer */}
          {!isEmpty && checkoutStep === 'cart' && (
            <div className="cart-modal-footer">
              <button 
                className="clear-cart-btn"
                onClick={clearCart}
                disabled={isCheckingOut}
              >
                üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
              </button>
              
              <div className="checkout-actions">
                <button 
                  className="continue-shopping-btn"
                  onClick={handleClose}
                >
                  üõçÔ∏è ‡∏ä‡πâ‡∏≠‡∏õ‡∏ï‡πà‡∏≠
                </button>
                
                <button 
                  className="checkout-btn"
                  onClick={handleCheckout}
                  disabled={isCheckingOut || !isLoggedIn()}
                >
                  {!isLoggedIn() ? 'üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠' : 'üõí ‡πÑ‡∏õ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô'}
                </button>
              </div>
            </div>
          )}

          {checkoutStep === 'address' && (
            <div className="cart-modal-footer">
              <button 
                className="back-btn"
                onClick={() => setCheckoutStep('cart')}
                disabled={isCheckingOut}
              >
                ‚Üê ‡∏Å‡∏•‡∏±‡∏ö
              </button>
              
              {/* üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î Payment Modal */}
              <button 
                className="confirm-order-btn"
                onClick={handleAddressSubmit}
                disabled={isCheckingOut || (!useManualAddress && !selectedProfileId)}
              >
                üí≥ ‡πÑ‡∏õ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
              </button>
            </div>
          )}

          {/* üÜï Modals */}
          {renderCreateProfileModal()}
          {renderManageProfilesModal()}
        </div>
      </div>

      {/* üÜï Payment Modal */}
      <PaymentModal
        isOpen={showPaymentModal}
        onClose={handlePaymentClose}
        orderData={paymentOrderData}
        onPaymentSuccess={handlePaymentSuccess}
      />
    </>
  );
};

export default CartModal;