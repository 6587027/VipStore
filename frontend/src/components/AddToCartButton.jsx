// frontend/src/components/AddToCartButton.jsx
import React, { useState } from 'react';
import { useCart } from '../context/CartContext';
import './AddToCartButton.css';

import { 
  ShoppingCart, 
  Plus, 
  Minus, 
  CheckCircle, 
  XCircle, 
  AlertTriangle,
  Lock,
  Loader2
} from 'lucide-react';

const AddToCartButton = ({ 
  product, 
  quantity = 1, 
  variant = 'primary',
  size = 'medium',
  showQuantity = false,
  disabled = false,
  className = ''
}) => {
  const { 
    addToCart, 
    isInCart, 
    getItemQuantity, 
    increaseQuantity,
    updateQuantity 
  } = useCart();
  
  const [isAdding, setIsAdding] = useState(false);
  const [showSuccess, setShowSuccess] = useState(false);
  const [localQuantity, setLocalQuantity] = useState(quantity);

  const isProductInCart = isInCart(product._id);
  const currentQuantity = getItemQuantity(product._id);
  const isOutOfStock = product.stock === 0;
  const isLowStock = product.stock <= 5 && product.stock > 0;
  
  // üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏° Stock Validation Logic
  const quantityToAdd = showQuantity ? localQuantity : quantity;
  const totalAfterAdd = currentQuantity + quantityToAdd;
  const availableStock = product.stock - currentQuantity;
  const canAddToCart = !isOutOfStock && totalAfterAdd <= product.stock && availableStock > 0;

  const handleAddToCart = async () => {
    if (disabled || isOutOfStock || isAdding) return;

    // üÜï ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Stock Validation ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°
    if (!canAddToCart) {
      if (isOutOfStock) {
        alert('‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ');
      } else if (currentQuantity >= product.stock) {
        alert(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß ${currentQuantity} ‡∏ä‡∏¥‡πâ‡∏ô (‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${product.stock} ‡∏ä‡∏¥‡πâ‡∏ô)`);
      } else if (totalAfterAdd > product.stock) {
        alert(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ ${quantityToAdd} ‡∏ä‡∏¥‡πâ‡∏ô ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏≠‡∏µ‡∏Å‡πÅ‡∏Ñ‡πà ${availableStock} ‡∏ä‡∏¥‡πâ‡∏ô`);
      }
      return;
    }

    setIsAdding(true);
    
    try {
      // Simulate API delay for better UX
      await new Promise(resolve => setTimeout(resolve, 300));
      
      addToCart(product, quantityToAdd);
      
      // Show success animation
      setShowSuccess(true);
      setTimeout(() => setShowSuccess(false), 1500);
      
    } catch (error) {
      console.error('Error adding to cart:', error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    } finally {
      setIsAdding(false);
    }
  };

  const handleUpdateQuantity = (newQuantity) => {
    if (newQuantity <= 0) return;
    
    // üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö stock ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï quantity
    if (newQuantity > product.stock) {
      alert(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÅ‡∏Ñ‡πà ${product.stock} ‡∏ä‡∏¥‡πâ‡∏ô`);
      return;
    }
    
    setLocalQuantity(newQuantity);
    if (isProductInCart) {
      updateQuantity(product._id, newQuantity);
    }
  };

  const handleQuickIncrease = () => {
    // üÜï ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö stock ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô quick actions
    if (currentQuantity >= product.stock) {
      alert(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÅ‡∏Ñ‡πà ${product.stock} ‡∏ä‡∏¥‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß ${currentQuantity} ‡∏ä‡∏¥‡πâ‡∏ô`);
      return;
    }
    increaseQuantity(product._id);
  };

  const handleQuickDecrease = () => {
    if (currentQuantity <= 1) return;
    updateQuantity(product._id, currentQuantity - 1);
  };

  const getButtonText = () => {
    if (isAdding) return '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°...';
    if (showSuccess) return '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß!';
    if (isOutOfStock) return '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î';
    if (isProductInCart) {
      // üÜï ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πá‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å
      if (currentQuantity >= product.stock) {
        return `‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß (${currentQuantity}/${product.stock})`;
      }
      return `‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ (${currentQuantity}/${product.stock})`;
    }
    // üÜï ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    if (showQuantity && availableStock > 0) {
      return `‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${availableStock})`;
    }
    return '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤';
  };

  const getButtonIcon = () => {
  if (isAdding) return <Loader2 className="w-4 h-4 animate-spin" />;
  if (showSuccess) return <CheckCircle className="w-4 h-4" />;
  if (isOutOfStock) return <XCircle className="w-4 h-4" />;
  if (isProductInCart && currentQuantity >= product.stock) return <Lock className="w-4 h-4" />;
  if (isProductInCart) return <CheckCircle className="w-4 h-4" />;
  return <ShoppingCart className="w-4 h-4" />;
};

  const buttonClasses = [
    'add-to-cart-button',
    `variant-${variant}`,
    `size-${size}`,
    isAdding && 'loading',
    showSuccess && 'success',
    isOutOfStock && 'out-of-stock',
    isProductInCart && 'in-cart',
    currentQuantity >= product.stock && 'stock-full', // üÜï CSS class ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°
    !canAddToCart && 'disabled', // üÜï disabled ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ
    className
  ].filter(Boolean).join(' ');

  return (
    <div className="add-to-cart-container">
      {/* Stock Status */}
      {isLowStock && !isOutOfStock && (
  <div className="stock-warning">
    <AlertTriangle className="w-4 h-4" />
    <span>‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {product.stock} ‡∏ä‡∏¥‡πâ‡∏ô</span>
  </div>
)}

      {/* üÜï ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß */}
      {isProductInCart && (
        <div className="cart-status">
          <ShoppingCart className="w-4 h-4" />
          ‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤: {currentQuantity} ‡∏ä‡∏¥‡πâ‡∏ô | ‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {availableStock} ‡∏ä‡∏¥‡πâ‡∏ô
        </div>
      )}

      {/* Quantity Selector (if enabled) */}
      {showQuantity && !isOutOfStock && (
        <div className="quantity-selector">
          <label className="quantity-label">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:</label>
          <div className="quantity-controls">
            <button
              type="button"
              className="quantity-btn decrease"
              onClick={() => handleUpdateQuantity(localQuantity - 1)}
              disabled={localQuantity <= 1}
            >
              -
            </button>
            <input
              type="number"
              min="1"
              max={Math.min(product.stock, availableStock + localQuantity)} // üÜï ‡∏à‡∏≥‡∏Å‡∏±‡∏î max
              value={localQuantity}
              onChange={(e) => handleUpdateQuantity(parseInt(e.target.value) || 1)}
              className="quantity-input"
            />
            <button
              type="button"
              className="quantity-btn increase"
              onClick={() => handleUpdateQuantity(localQuantity + 1)}
              disabled={localQuantity >= Math.min(product.stock, availableStock + localQuantity)} // üÜï ‡∏à‡∏≥‡∏Å‡∏±‡∏î max
            >
              +
            </button>
          </div>
        </div>
      )}

      {/* Add to Cart Button */}
      <button
        type="button"
        className={buttonClasses}
        onClick={handleAddToCart}
        disabled={disabled || !canAddToCart || isAdding} // üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏° !canAddToCart
        title={
          isOutOfStock ? '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î' : 
          !canAddToCart ? '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ' : 
          '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤'
        }
      >
        <span className="button-icon">
          {getButtonIcon()}
        </span>
        <span className="button-text">
          {getButtonText()}
        </span>
        
        {/* Loading spinner */}
        {isAdding && (
          <span className="loading-spinner">
            <div className="spinner"></div>
          </span>
        )}
      </button>

      {/* Quick Actions (for items already in cart) */}
      {isProductInCart && !showQuantity && (
        <div className="quick-actions">
          <button
            type="button"
            className="quick-action-btn"
            onClick={handleQuickDecrease}
            disabled={currentQuantity <= 1}
            title="‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"
          >
            <Minus className="w-3 h-3" />
          </button>
          <span className="current-quantity">{currentQuantity}</span>
          <button
            type="button"
            className="quick-action-btn"
            onClick={handleQuickIncrease}
            disabled={currentQuantity >= product.stock}
            title={currentQuantity >= product.stock ? '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ (‡πÄ‡∏ï‡πá‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å)' : '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô'}
          >
            <Plus className="w-3 h-3" />
          </button>
        </div>
      )}
    </div>
  );
};

export default AddToCartButton;